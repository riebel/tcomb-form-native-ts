const test = require('tape');
const React = require('react');
const { Form, List, Struct, Textbox } = require('../dist');

test('List multiline option fix verification', function (assert) {
  console.log('\n=== Testing Multiline Option Fix in List Components ===\n');

  // Simulate your exact schema structure (as it would appear after tcomb-json-schema transformation)
  const listItemSchema = {
    type: 'object',
    properties: {
      task: {
        type: 'string',
        title: 'Aufgabe',
        options: {
          multiline: true
        },
        'ui:widget': 'textarea'
      }
    }
  };

  console.log('1. Testing schema structure:');
  console.log('   - List item schema:', JSON.stringify(listItemSchema, null, 2));

  // Create a mock List component to test the getItems method
  const mockList = new List({
    type: {
      meta: {
        type: listItemSchema,
        kind: 'list'
      }
    },
    options: {
      item: {} // No specific item options
    },
    value: [{ task: 'Test task content' }],
    onChange: () => {},
    ctx: {
      context: {},
      uidGenerator: { next: () => 'test-id' },
      auto: 'labels',
      config: {},
      label: 'Test List',
      i18n: { add: 'Add', remove: 'Remove', up: 'Up', down: 'Down' },
      stylesheet: {},
      templates: { list: () => null },
      path: ['tasks']
    }
  });

  console.log('\n2. Testing List component option extraction:');
  
  // Test the getItems method to see if it extracts options correctly
  const items = mockList.getItems();
  console.log('   - Number of items generated:', items.length);
  
  if (items.length > 0) {
    const firstItem = items[0];
    console.log('   - First item structure:', {
      hasInput: !!firstItem.input,
      hasButtons: !!firstItem.buttons,
      buttonCount: firstItem.buttons ? firstItem.buttons.length : 0
    });

    // Check if the input component was created
    if (firstItem.input) {
      console.log('   - Input component type:', firstItem.input.type.name || firstItem.input.type.displayName);
      console.log('   - Input component props keys:', Object.keys(firstItem.input.props));
      
      // Check if options are being passed through
      if (firstItem.input.props.options) {
        console.log('   - Options passed to input component:', firstItem.input.props.options);
        
        // Check if fields options are present
        if (firstItem.input.props.options.fields) {
          console.log('   - Fields options found:', firstItem.input.props.options.fields);
          
          // Check specifically for task field options
          if (firstItem.input.props.options.fields.task) {
            console.log('   - Task field options:', firstItem.input.props.options.fields.task);
            
            // Verify multiline option is present
            if (firstItem.input.props.options.fields.task.multiline === true) {
              console.log('   ✅ SUCCESS: multiline option found and set to true!');
              assert.pass('Multiline option correctly extracted and passed through');
            } else {
              console.log('   ❌ FAILURE: multiline option not found or incorrect value');
              console.log('   - Expected: true, Got:', firstItem.input.props.options.fields.task.multiline);
              assert.fail('Multiline option not correctly passed through');
            }
          } else {
            console.log('   ❌ FAILURE: task field options not found');
            assert.fail('Task field options not found in component props');
          }
        } else {
          console.log('   ❌ FAILURE: fields options not found');
          assert.fail('Fields options not found in component props');
        }
      } else {
        console.log('   ❌ FAILURE: no options passed to input component');
        assert.fail('No options passed to input component');
      }
    } else {
      console.log('   ❌ FAILURE: no input component created');
      assert.fail('No input component created for list item');
    }
  } else {
    console.log('   ❌ FAILURE: no items generated');
    assert.fail('No items generated by List component');
  }

  console.log('\n3. Testing Struct component option handling:');
  
  // Test Struct component directly with the schema
  const mockStruct = new Struct({
    type: listItemSchema,
    options: {
      fields: {
        task: {
          multiline: true
        }
      }
    },
    value: { task: 'Test content' },
    onChange: () => {},
    ctx: {
      context: {},
      uidGenerator: { next: () => 'test-id' },
      auto: 'labels',
      config: {},
      label: 'Test Struct',
      i18n: {},
      stylesheet: {},
      templates: { textbox: () => null },
      path: ['tasks', '0']
    }
  });

  const inputs = mockStruct.getInputs();
  console.log('   - Generated inputs:', Object.keys(inputs));
  
  if (inputs.task) {
    console.log('   - Task input component type:', inputs.task.type.name || inputs.task.type.displayName);
    console.log('   - Task input options:', inputs.task.props.options);
    
    if (inputs.task.props.options && inputs.task.props.options.multiline === true) {
      console.log('   ✅ SUCCESS: Struct correctly passes multiline option to Textbox!');
      assert.pass('Struct component correctly passes multiline option');
    } else {
      console.log('   ❌ FAILURE: multiline option not passed by Struct');
      assert.fail('Struct component does not pass multiline option correctly');
    }
  } else {
    console.log('   ❌ FAILURE: task input not generated by Struct');
    assert.fail('Task input not generated by Struct component');
  }

  console.log('\n4. Testing Textbox component option handling:');
  
  // Test Textbox component directly
  const mockTextbox = new Textbox({
    type: { meta: { kind: 'irreducible' }, displayName: 'String' },
    options: {
      multiline: true,
      label: 'Aufgabe'
    },
    value: 'Test content',
    onChange: () => {},
    ctx: {
      context: {},
      uidGenerator: { next: () => 'test-id' },
      auto: 'labels',
      config: {},
      label: 'Aufgabe',
      i18n: {},
      stylesheet: {},
      templates: { textbox: () => null },
      path: ['tasks', '0', 'task']
    }
  });

  const textboxLocals = mockTextbox.getLocals();
  console.log('   - Textbox locals keys:', Object.keys(textboxLocals));
  console.log('   - Multiline property in locals:', textboxLocals.multiline);
  
  if (textboxLocals.multiline === true) {
    console.log('   ✅ SUCCESS: Textbox correctly receives and processes multiline option!');
    assert.pass('Textbox component correctly handles multiline option');
  } else {
    console.log('   ❌ FAILURE: Textbox does not have multiline property set');
    assert.fail('Textbox component does not handle multiline option correctly');
  }

  console.log('\n=== Test Summary ===');
  console.log('This test verifies the complete flow: List → Struct → Textbox');
  console.log('The multiline option should be extracted from the schema and passed through all components.');
  
  assert.end();
});

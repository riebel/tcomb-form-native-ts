import React from 'react';
import type { TextboxTemplateProps } from '../types/template.types';
declare const getLocals: (props: TextboxTemplateProps) => {
    hidden?: boolean | undefined;
    onChangeText?: ((text: string) => void) | undefined;
    editable: unknown;
    label: string | undefined;
    help: unknown;
    onChange?: ((event: {
        nativeEvent: {
            text: string;
        };
    }) => void) | undefined;
    allowFontScaling?: boolean | undefined;
    autoCapitalize?: "none" | "sentences" | "words" | "characters" | undefined;
    autoComplete?: "name" | "off" | "additional-name" | "address-line1" | "address-line2" | "birthdate-day" | "birthdate-full" | "birthdate-month" | "birthdate-year" | "cc-csc" | "cc-exp" | "cc-exp-day" | "cc-exp-month" | "cc-exp-year" | "cc-number" | "cc-name" | "cc-given-name" | "cc-middle-name" | "cc-family-name" | "cc-type" | "country" | "current-password" | "email" | "family-name" | "gender" | "given-name" | "honorific-prefix" | "honorific-suffix" | "name-family" | "name-given" | "name-middle" | "name-middle-initial" | "name-prefix" | "name-suffix" | "new-password" | "nickname" | "one-time-code" | "organization" | "organization-title" | "password" | "password-new" | "postal-address" | "postal-address-country" | "postal-address-extended" | "postal-address-extended-postal-code" | "postal-address-locality" | "postal-address-region" | "postal-code" | "street-address" | "sms-otp" | "tel" | "tel-country-code" | "tel-national" | "tel-device" | "url" | "username" | "username-new" | undefined;
    autoCorrect?: boolean | undefined;
    autoFocus?: boolean | undefined;
    blurOnSubmit?: boolean | undefined;
    submitBehavior?: import("react-native").SubmitBehavior | undefined;
    caretHidden?: boolean | undefined;
    contextMenuHidden?: boolean | undefined;
    defaultValue?: string | undefined;
    keyboardType?: import("react-native").KeyboardTypeOptions | undefined;
    inputMode?: import("react-native").InputModeOptions | undefined;
    maxLength?: number | undefined;
    multiline?: boolean | undefined;
    onBlur?: ((e: import("react-native").NativeSyntheticEvent<import("react-native").TextInputFocusEventData>) => void) | undefined;
    onContentSizeChange?: ((e: import("react-native").NativeSyntheticEvent<import("react-native").TextInputContentSizeChangeEventData>) => void) | undefined;
    onEndEditing?: ((e: import("react-native").NativeSyntheticEvent<import("react-native").TextInputEndEditingEventData>) => void) | undefined;
    onPress?: ((e: import("react-native").NativeSyntheticEvent<import("react-native").NativeTouchEvent>) => void) | undefined;
    onPressIn?: ((e: import("react-native").NativeSyntheticEvent<import("react-native").NativeTouchEvent>) => void) | undefined;
    onPressOut?: ((e: import("react-native").NativeSyntheticEvent<import("react-native").NativeTouchEvent>) => void) | undefined;
    onFocus?: ((e: import("react-native").NativeSyntheticEvent<import("react-native").TextInputFocusEventData>) => void) | undefined;
    onSelectionChange?: ((e: import("react-native").NativeSyntheticEvent<import("react-native").TextInputSelectionChangeEventData>) => void) | undefined;
    onSubmitEditing?: ((e: import("react-native").NativeSyntheticEvent<import("react-native").TextInputSubmitEditingEventData>) => void) | undefined;
    onScroll?: ((e: import("react-native").NativeSyntheticEvent<import("react-native").TextInputScrollEventData>) => void) | undefined;
    onKeyPress?: ((e: import("react-native").NativeSyntheticEvent<import("react-native").TextInputKeyPressEventData>) => void) | undefined;
    placeholder: string | undefined;
    placeholderTextColor?: import("react-native").ColorValue | undefined;
    readOnly?: boolean | undefined;
    returnKeyType?: import("react-native").ReturnKeyTypeOptions | undefined;
    enterKeyHint?: import("react-native").EnterKeyHintTypeOptions | undefined;
    secureTextEntry?: boolean | undefined;
    selectTextOnFocus?: boolean | undefined;
    selection?: {
        start: number;
        end?: number | undefined;
    } | undefined;
    selectionColor?: import("react-native").ColorValue | undefined;
    textAlign?: "center" | "left" | "right" | undefined;
    testID?: string | undefined;
    inputAccessoryViewID?: string | undefined;
    maxFontSizeMultiplier?: number | null | undefined;
    children?: React.ReactNode;
    hitSlop?: number | import("react-native").Insets | null | undefined;
    id?: string | undefined;
    needsOffscreenAlphaCompositing?: boolean | undefined;
    onLayout?: ((event: import("react-native").LayoutChangeEvent) => void) | undefined;
    pointerEvents?: "box-none" | "none" | "box-only" | "auto" | undefined;
    removeClippedSubviews?: boolean | undefined;
    nativeID?: string | undefined;
    collapsable?: boolean | undefined;
    collapsableChildren?: boolean | undefined;
    renderToHardwareTextureAndroid?: boolean | undefined;
    focusable?: boolean | undefined;
    tabIndex?: 0 | -1 | undefined;
    shouldRasterizeIOS?: boolean | undefined;
    isTVSelectable?: boolean | undefined;
    hasTVPreferredFocus?: boolean | undefined;
    tvParallaxShiftDistanceX?: number | undefined;
    tvParallaxShiftDistanceY?: number | undefined;
    tvParallaxTiltAngle?: number | undefined;
    tvParallaxMagnification?: number | undefined;
    onStartShouldSetResponder?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
    onMoveShouldSetResponder?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
    onResponderEnd?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onResponderGrant?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onResponderReject?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onResponderMove?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onResponderRelease?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onResponderStart?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onResponderTerminationRequest?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
    onResponderTerminate?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onStartShouldSetResponderCapture?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
    onMoveShouldSetResponderCapture?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
    onTouchStart?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onTouchMove?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onTouchEnd?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onTouchCancel?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onTouchEndCapture?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onPointerEnter?: ((event: import("react-native").PointerEvent) => void) | undefined;
    onPointerEnterCapture?: ((event: import("react-native").PointerEvent) => void) | undefined;
    onPointerLeave?: ((event: import("react-native").PointerEvent) => void) | undefined;
    onPointerLeaveCapture?: ((event: import("react-native").PointerEvent) => void) | undefined;
    onPointerMove?: ((event: import("react-native").PointerEvent) => void) | undefined;
    onPointerMoveCapture?: ((event: import("react-native").PointerEvent) => void) | undefined;
    onPointerCancel?: ((event: import("react-native").PointerEvent) => void) | undefined;
    onPointerCancelCapture?: ((event: import("react-native").PointerEvent) => void) | undefined;
    onPointerDown?: ((event: import("react-native").PointerEvent) => void) | undefined;
    onPointerDownCapture?: ((event: import("react-native").PointerEvent) => void) | undefined;
    onPointerUp?: ((event: import("react-native").PointerEvent) => void) | undefined;
    onPointerUpCapture?: ((event: import("react-native").PointerEvent) => void) | undefined;
    accessible?: boolean | undefined;
    accessibilityActions?: readonly Readonly<{
        name: string;
        label?: string | undefined;
    }>[] | undefined;
    accessibilityLabel?: string | undefined;
    'aria-label'?: string | undefined;
    accessibilityRole?: import("react-native").AccessibilityRole | undefined;
    accessibilityState?: import("react-native").AccessibilityState | undefined;
    'aria-busy'?: boolean | undefined;
    'aria-checked'?: boolean | "mixed" | undefined;
    'aria-disabled'?: boolean | undefined;
    'aria-expanded'?: boolean | undefined;
    'aria-selected'?: boolean | undefined;
    accessibilityHint?: string | undefined;
    accessibilityValue?: import("react-native").AccessibilityValue | undefined;
    'aria-valuemax'?: number | undefined;
    'aria-valuemin'?: number | undefined;
    'aria-valuenow'?: number | undefined;
    'aria-valuetext'?: string | undefined;
    onAccessibilityAction?: ((event: import("react-native").AccessibilityActionEvent) => void) | undefined;
    importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | undefined;
    'aria-hidden'?: boolean | undefined;
    'aria-modal'?: boolean | undefined;
    role?: import("react-native").Role | undefined;
    accessibilityLabelledBy?: string | string[] | undefined;
    'aria-labelledby'?: string | undefined;
    accessibilityLiveRegion?: "none" | "polite" | "assertive" | undefined;
    'aria-live'?: "polite" | "assertive" | "off" | undefined;
    accessibilityElementsHidden?: boolean | undefined;
    accessibilityViewIsModal?: boolean | undefined;
    onAccessibilityEscape?: (() => void) | undefined;
    onAccessibilityTap?: (() => void) | undefined;
    onMagicTap?: (() => void) | undefined;
    accessibilityIgnoresInvertColors?: boolean | undefined;
    accessibilityLanguage?: string | undefined;
    accessibilityShowsLargeContentViewer?: boolean | undefined;
    accessibilityLargeContentTitle?: string | undefined;
    disableKeyboardShortcuts?: boolean | undefined;
    clearButtonMode?: "never" | "while-editing" | "unless-editing" | "always" | undefined;
    clearTextOnFocus?: boolean | undefined;
    dataDetectorTypes?: import("react-native").DataDetectorTypes | import("react-native").DataDetectorTypes[] | undefined;
    enablesReturnKeyAutomatically?: boolean | undefined;
    keyboardAppearance?: "light" | "default" | "dark" | undefined;
    passwordRules?: string | null | undefined;
    rejectResponderTermination?: boolean | null | undefined;
    selectionState?: import("react-native").DocumentSelectionState | undefined;
    spellCheck?: boolean | undefined;
    textContentType?: "name" | "none" | "nickname" | "password" | "username" | "flightNumber" | "URL" | "addressCity" | "addressCityAndState" | "addressState" | "countryName" | "creditCardNumber" | "creditCardExpiration" | "creditCardExpirationMonth" | "creditCardExpirationYear" | "creditCardSecurityCode" | "creditCardType" | "creditCardName" | "creditCardGivenName" | "creditCardMiddleName" | "creditCardFamilyName" | "emailAddress" | "familyName" | "fullStreetAddress" | "givenName" | "jobTitle" | "location" | "middleName" | "namePrefix" | "nameSuffix" | "organizationName" | "postalCode" | "streetAddressLine1" | "streetAddressLine2" | "sublocality" | "telephoneNumber" | "newPassword" | "oneTimeCode" | "birthdate" | "birthdateDay" | "birthdateMonth" | "birthdateYear" | "cellularEID" | "cellularIMEI" | "dateTime" | "shipmentTrackingNumber" | undefined;
    scrollEnabled?: boolean | undefined;
    lineBreakStrategyIOS?: "none" | "standard" | "hangul-word" | "push-out" | undefined;
    lineBreakModeIOS?: "middle" | "wordWrapping" | "char" | "clip" | "head" | "tail" | undefined;
    smartInsertDelete?: boolean | undefined;
    cursorColor?: import("react-native").ColorValue | null | undefined;
    selectionHandleColor?: import("react-native").ColorValue | null | undefined;
    importantForAutofill?: "auto" | "yes" | "no" | "noExcludeDescendants" | "yesExcludeDescendants" | undefined;
    disableFullscreenUI?: boolean | undefined;
    inlineImageLeft?: string | undefined;
    inlineImagePadding?: number | undefined;
    numberOfLines?: number | undefined;
    returnKeyLabel?: string | undefined;
    textBreakStrategy?: "simple" | "highQuality" | "balanced" | undefined;
    underlineColorAndroid?: import("react-native").ColorValue | undefined;
    textAlignVertical?: "auto" | "center" | "top" | "bottom" | undefined;
    showSoftInputOnFocus?: boolean | undefined;
    verticalAlign?: "auto" | "top" | "bottom" | "middle" | undefined;
    type: import("../types/template.types").TypeWithMeta | undefined;
    options: {
        [key: string]: unknown;
        label?: string | undefined;
        placeholder?: string | undefined;
        transformer?: {
            format: <T = unknown>(value: T) => string;
            parse: <T_1 = unknown>(value: string) => T_1;
        } | undefined;
    };
    value: string | number | null | undefined;
    error: string | undefined;
    hasError: boolean;
    stylesheet: {
        formGroup?: {
            normal?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            error?: import("react-native").StyleProp<import("react-native").ViewStyle>;
        } | undefined;
        controlLabel?: {
            normal?: import("react-native").StyleProp<import("react-native").TextStyle>;
            error?: import("react-native").StyleProp<import("react-native").TextStyle>;
        } | undefined;
        textbox?: {
            normal?: import("react-native").StyleProp<import("react-native").TextStyle>;
            error?: import("react-native").StyleProp<import("react-native").TextStyle>;
            notEditable?: import("react-native").StyleProp<import("react-native").TextStyle>;
        } | undefined;
        textboxView?: {
            normal?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            error?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            notEditable?: import("react-native").StyleProp<import("react-native").ViewStyle>;
        } | undefined;
        helpBlock?: {
            normal?: import("react-native").StyleProp<import("react-native").TextStyle>;
            error?: import("react-native").StyleProp<import("react-native").TextStyle>;
        } | undefined;
        errorBlock?: import("react-native").StyleProp<import("react-native").TextStyle>;
    };
    ctx: {
        auto: string;
        label?: string | undefined;
        i18n: {
            optional: string;
            required: string;
        };
        templates?: import("../types/template.types").FormTemplates | undefined;
    } | undefined;
};
export declare class Textbox {
    props: TextboxTemplateProps;
    private _hasError;
    private _error;
    static numberTransformer?: {
        format: (value: unknown) => string | null;
        parse: (value: string) => unknown;
    };
    constructor(props: TextboxTemplateProps);
    getLocals(): {
        hidden?: boolean | undefined;
        onChangeText?: ((text: string) => void) | undefined;
        editable: unknown;
        label: string | undefined;
        help: unknown;
        onChange?: ((event: {
            nativeEvent: {
                text: string;
            };
        }) => void) | undefined;
        allowFontScaling?: boolean | undefined;
        autoCapitalize?: "none" | "sentences" | "words" | "characters" | undefined;
        autoComplete?: "name" | "off" | "additional-name" | "address-line1" | "address-line2" | "birthdate-day" | "birthdate-full" | "birthdate-month" | "birthdate-year" | "cc-csc" | "cc-exp" | "cc-exp-day" | "cc-exp-month" | "cc-exp-year" | "cc-number" | "cc-name" | "cc-given-name" | "cc-middle-name" | "cc-family-name" | "cc-type" | "country" | "current-password" | "email" | "family-name" | "gender" | "given-name" | "honorific-prefix" | "honorific-suffix" | "name-family" | "name-given" | "name-middle" | "name-middle-initial" | "name-prefix" | "name-suffix" | "new-password" | "nickname" | "one-time-code" | "organization" | "organization-title" | "password" | "password-new" | "postal-address" | "postal-address-country" | "postal-address-extended" | "postal-address-extended-postal-code" | "postal-address-locality" | "postal-address-region" | "postal-code" | "street-address" | "sms-otp" | "tel" | "tel-country-code" | "tel-national" | "tel-device" | "url" | "username" | "username-new" | undefined;
        autoCorrect?: boolean | undefined;
        autoFocus?: boolean | undefined;
        blurOnSubmit?: boolean | undefined;
        submitBehavior?: import("react-native").SubmitBehavior | undefined;
        caretHidden?: boolean | undefined;
        contextMenuHidden?: boolean | undefined;
        defaultValue?: string | undefined;
        keyboardType?: import("react-native").KeyboardTypeOptions | undefined;
        inputMode?: import("react-native").InputModeOptions | undefined;
        maxLength?: number | undefined;
        multiline?: boolean | undefined;
        onBlur?: ((e: import("react-native").NativeSyntheticEvent<import("react-native").TextInputFocusEventData>) => void) | undefined;
        onContentSizeChange?: ((e: import("react-native").NativeSyntheticEvent<import("react-native").TextInputContentSizeChangeEventData>) => void) | undefined;
        onEndEditing?: ((e: import("react-native").NativeSyntheticEvent<import("react-native").TextInputEndEditingEventData>) => void) | undefined;
        onPress?: ((e: import("react-native").NativeSyntheticEvent<import("react-native").NativeTouchEvent>) => void) | undefined;
        onPressIn?: ((e: import("react-native").NativeSyntheticEvent<import("react-native").NativeTouchEvent>) => void) | undefined;
        onPressOut?: ((e: import("react-native").NativeSyntheticEvent<import("react-native").NativeTouchEvent>) => void) | undefined;
        onFocus?: ((e: import("react-native").NativeSyntheticEvent<import("react-native").TextInputFocusEventData>) => void) | undefined;
        onSelectionChange?: ((e: import("react-native").NativeSyntheticEvent<import("react-native").TextInputSelectionChangeEventData>) => void) | undefined;
        onSubmitEditing?: ((e: import("react-native").NativeSyntheticEvent<import("react-native").TextInputSubmitEditingEventData>) => void) | undefined;
        onScroll?: ((e: import("react-native").NativeSyntheticEvent<import("react-native").TextInputScrollEventData>) => void) | undefined;
        onKeyPress?: ((e: import("react-native").NativeSyntheticEvent<import("react-native").TextInputKeyPressEventData>) => void) | undefined;
        placeholder: string | undefined;
        placeholderTextColor?: import("react-native").ColorValue | undefined;
        readOnly?: boolean | undefined;
        returnKeyType?: import("react-native").ReturnKeyTypeOptions | undefined;
        enterKeyHint?: import("react-native").EnterKeyHintTypeOptions | undefined;
        secureTextEntry?: boolean | undefined;
        selectTextOnFocus?: boolean | undefined;
        selection?: {
            start: number;
            end?: number | undefined;
        } | undefined;
        selectionColor?: import("react-native").ColorValue | undefined;
        textAlign?: "center" | "left" | "right" | undefined;
        testID?: string | undefined;
        inputAccessoryViewID?: string | undefined;
        maxFontSizeMultiplier?: number | null | undefined;
        children?: React.ReactNode;
        hitSlop?: number | import("react-native").Insets | null | undefined;
        id?: string | undefined;
        needsOffscreenAlphaCompositing?: boolean | undefined;
        onLayout?: ((event: import("react-native").LayoutChangeEvent) => void) | undefined;
        pointerEvents?: "box-none" | "none" | "box-only" | "auto" | undefined;
        removeClippedSubviews?: boolean | undefined;
        nativeID?: string | undefined;
        collapsable?: boolean | undefined;
        collapsableChildren?: boolean | undefined;
        renderToHardwareTextureAndroid?: boolean | undefined;
        focusable?: boolean | undefined;
        tabIndex?: 0 | -1 | undefined;
        shouldRasterizeIOS?: boolean | undefined;
        isTVSelectable?: boolean | undefined;
        hasTVPreferredFocus?: boolean | undefined;
        tvParallaxShiftDistanceX?: number | undefined;
        tvParallaxShiftDistanceY?: number | undefined;
        tvParallaxTiltAngle?: number | undefined;
        tvParallaxMagnification?: number | undefined;
        onStartShouldSetResponder?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
        onMoveShouldSetResponder?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
        onResponderEnd?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
        onResponderGrant?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
        onResponderReject?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
        onResponderMove?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
        onResponderRelease?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
        onResponderStart?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
        onResponderTerminationRequest?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
        onResponderTerminate?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
        onStartShouldSetResponderCapture?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
        onMoveShouldSetResponderCapture?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
        onTouchStart?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
        onTouchMove?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
        onTouchEnd?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
        onTouchCancel?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
        onTouchEndCapture?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
        onPointerEnter?: ((event: import("react-native").PointerEvent) => void) | undefined;
        onPointerEnterCapture?: ((event: import("react-native").PointerEvent) => void) | undefined;
        onPointerLeave?: ((event: import("react-native").PointerEvent) => void) | undefined;
        onPointerLeaveCapture?: ((event: import("react-native").PointerEvent) => void) | undefined;
        onPointerMove?: ((event: import("react-native").PointerEvent) => void) | undefined;
        onPointerMoveCapture?: ((event: import("react-native").PointerEvent) => void) | undefined;
        onPointerCancel?: ((event: import("react-native").PointerEvent) => void) | undefined;
        onPointerCancelCapture?: ((event: import("react-native").PointerEvent) => void) | undefined;
        onPointerDown?: ((event: import("react-native").PointerEvent) => void) | undefined;
        onPointerDownCapture?: ((event: import("react-native").PointerEvent) => void) | undefined;
        onPointerUp?: ((event: import("react-native").PointerEvent) => void) | undefined;
        onPointerUpCapture?: ((event: import("react-native").PointerEvent) => void) | undefined;
        accessible?: boolean | undefined;
        accessibilityActions?: readonly Readonly<{
            name: string;
            label?: string | undefined;
        }>[] | undefined;
        accessibilityLabel?: string | undefined;
        'aria-label'?: string | undefined;
        accessibilityRole?: import("react-native").AccessibilityRole | undefined;
        accessibilityState?: import("react-native").AccessibilityState | undefined;
        'aria-busy'?: boolean | undefined;
        'aria-checked'?: boolean | "mixed" | undefined;
        'aria-disabled'?: boolean | undefined;
        'aria-expanded'?: boolean | undefined;
        'aria-selected'?: boolean | undefined;
        accessibilityHint?: string | undefined;
        accessibilityValue?: import("react-native").AccessibilityValue | undefined;
        'aria-valuemax'?: number | undefined;
        'aria-valuemin'?: number | undefined;
        'aria-valuenow'?: number | undefined;
        'aria-valuetext'?: string | undefined;
        onAccessibilityAction?: ((event: import("react-native").AccessibilityActionEvent) => void) | undefined;
        importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | undefined;
        'aria-hidden'?: boolean | undefined;
        'aria-modal'?: boolean | undefined;
        role?: import("react-native").Role | undefined;
        accessibilityLabelledBy?: string | string[] | undefined;
        'aria-labelledby'?: string | undefined;
        accessibilityLiveRegion?: "none" | "polite" | "assertive" | undefined;
        'aria-live'?: "polite" | "assertive" | "off" | undefined;
        accessibilityElementsHidden?: boolean | undefined;
        accessibilityViewIsModal?: boolean | undefined;
        onAccessibilityEscape?: (() => void) | undefined;
        onAccessibilityTap?: (() => void) | undefined;
        onMagicTap?: (() => void) | undefined;
        accessibilityIgnoresInvertColors?: boolean | undefined;
        accessibilityLanguage?: string | undefined;
        accessibilityShowsLargeContentViewer?: boolean | undefined;
        accessibilityLargeContentTitle?: string | undefined;
        disableKeyboardShortcuts?: boolean | undefined;
        clearButtonMode?: "never" | "while-editing" | "unless-editing" | "always" | undefined;
        clearTextOnFocus?: boolean | undefined;
        dataDetectorTypes?: import("react-native").DataDetectorTypes | import("react-native").DataDetectorTypes[] | undefined;
        enablesReturnKeyAutomatically?: boolean | undefined;
        keyboardAppearance?: "light" | "default" | "dark" | undefined;
        passwordRules?: string | null | undefined;
        rejectResponderTermination?: boolean | null | undefined;
        selectionState?: import("react-native").DocumentSelectionState | undefined;
        spellCheck?: boolean | undefined;
        textContentType?: "name" | "none" | "nickname" | "password" | "username" | "flightNumber" | "URL" | "addressCity" | "addressCityAndState" | "addressState" | "countryName" | "creditCardNumber" | "creditCardExpiration" | "creditCardExpirationMonth" | "creditCardExpirationYear" | "creditCardSecurityCode" | "creditCardType" | "creditCardName" | "creditCardGivenName" | "creditCardMiddleName" | "creditCardFamilyName" | "emailAddress" | "familyName" | "fullStreetAddress" | "givenName" | "jobTitle" | "location" | "middleName" | "namePrefix" | "nameSuffix" | "organizationName" | "postalCode" | "streetAddressLine1" | "streetAddressLine2" | "sublocality" | "telephoneNumber" | "newPassword" | "oneTimeCode" | "birthdate" | "birthdateDay" | "birthdateMonth" | "birthdateYear" | "cellularEID" | "cellularIMEI" | "dateTime" | "shipmentTrackingNumber" | undefined;
        scrollEnabled?: boolean | undefined;
        lineBreakStrategyIOS?: "none" | "standard" | "hangul-word" | "push-out" | undefined;
        lineBreakModeIOS?: "middle" | "wordWrapping" | "char" | "clip" | "head" | "tail" | undefined;
        smartInsertDelete?: boolean | undefined;
        cursorColor?: import("react-native").ColorValue | null | undefined;
        selectionHandleColor?: import("react-native").ColorValue | null | undefined;
        importantForAutofill?: "auto" | "yes" | "no" | "noExcludeDescendants" | "yesExcludeDescendants" | undefined;
        disableFullscreenUI?: boolean | undefined;
        inlineImageLeft?: string | undefined;
        inlineImagePadding?: number | undefined;
        numberOfLines?: number | undefined;
        returnKeyLabel?: string | undefined;
        textBreakStrategy?: "simple" | "highQuality" | "balanced" | undefined;
        underlineColorAndroid?: import("react-native").ColorValue | undefined;
        textAlignVertical?: "auto" | "center" | "top" | "bottom" | undefined;
        showSoftInputOnFocus?: boolean | undefined;
        verticalAlign?: "auto" | "top" | "bottom" | "middle" | undefined;
        type: import("../types/template.types").TypeWithMeta | undefined;
        options: {
            [key: string]: unknown;
            label?: string | undefined;
            placeholder?: string | undefined;
            transformer?: {
                format: <T = unknown>(value: T) => string;
                parse: <T_1 = unknown>(value: string) => T_1;
            } | undefined;
        };
        value: string | number | null | undefined;
        error: string | undefined;
        hasError: boolean;
        stylesheet: {
            formGroup?: {
                normal?: import("react-native").StyleProp<import("react-native").ViewStyle>;
                error?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            } | undefined;
            controlLabel?: {
                normal?: import("react-native").StyleProp<import("react-native").TextStyle>;
                error?: import("react-native").StyleProp<import("react-native").TextStyle>;
            } | undefined;
            textbox?: {
                normal?: import("react-native").StyleProp<import("react-native").TextStyle>;
                error?: import("react-native").StyleProp<import("react-native").TextStyle>;
                notEditable?: import("react-native").StyleProp<import("react-native").TextStyle>;
            } | undefined;
            textboxView?: {
                normal?: import("react-native").StyleProp<import("react-native").ViewStyle>;
                error?: import("react-native").StyleProp<import("react-native").ViewStyle>;
                notEditable?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            } | undefined;
            helpBlock?: {
                normal?: import("react-native").StyleProp<import("react-native").TextStyle>;
                error?: import("react-native").StyleProp<import("react-native").TextStyle>;
            } | undefined;
            errorBlock?: import("react-native").StyleProp<import("react-native").TextStyle>;
        };
        ctx: {
            auto: string;
            label?: string | undefined;
            i18n: {
                optional: string;
                required: string;
            };
            templates?: import("../types/template.types").FormTemplates | undefined;
        } | undefined;
    };
    pureValidate(): {
        value: string | number | null | undefined;
        hasError: boolean;
        error: string | undefined;
    };
    getTemplate(): {};
    static ReactComponent: {
        new (props: TextboxTemplateProps): {
            render(): import("react/jsx-runtime").JSX.Element;
            context: unknown;
            setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<TextboxTemplateProps>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
            forceUpdate(callback?: (() => void) | undefined): void;
            readonly props: Readonly<TextboxTemplateProps>;
            state: Readonly<{}>;
            componentDidMount?(): void;
            shouldComponentUpdate?(nextProps: Readonly<TextboxTemplateProps>, nextState: Readonly<{}>, nextContext: any): boolean;
            componentWillUnmount?(): void;
            componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
            getSnapshotBeforeUpdate?(prevProps: Readonly<TextboxTemplateProps>, prevState: Readonly<{}>): any;
            componentDidUpdate?(prevProps: Readonly<TextboxTemplateProps>, prevState: Readonly<{}>, snapshot?: any): void;
            componentWillMount?(): void;
            UNSAFE_componentWillMount?(): void;
            componentWillReceiveProps?(nextProps: Readonly<TextboxTemplateProps>, nextContext: any): void;
            UNSAFE_componentWillReceiveProps?(nextProps: Readonly<TextboxTemplateProps>, nextContext: any): void;
            componentWillUpdate?(nextProps: Readonly<TextboxTemplateProps>, nextState: Readonly<{}>, nextContext: any): void;
            UNSAFE_componentWillUpdate?(nextProps: Readonly<TextboxTemplateProps>, nextState: Readonly<{}>, nextContext: any): void;
        };
        new (props: TextboxTemplateProps, context: any): {
            render(): import("react/jsx-runtime").JSX.Element;
            context: unknown;
            setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<TextboxTemplateProps>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
            forceUpdate(callback?: (() => void) | undefined): void;
            readonly props: Readonly<TextboxTemplateProps>;
            state: Readonly<{}>;
            componentDidMount?(): void;
            shouldComponentUpdate?(nextProps: Readonly<TextboxTemplateProps>, nextState: Readonly<{}>, nextContext: any): boolean;
            componentWillUnmount?(): void;
            componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
            getSnapshotBeforeUpdate?(prevProps: Readonly<TextboxTemplateProps>, prevState: Readonly<{}>): any;
            componentDidUpdate?(prevProps: Readonly<TextboxTemplateProps>, prevState: Readonly<{}>, snapshot?: any): void;
            componentWillMount?(): void;
            UNSAFE_componentWillMount?(): void;
            componentWillReceiveProps?(nextProps: Readonly<TextboxTemplateProps>, nextContext: any): void;
            UNSAFE_componentWillReceiveProps?(nextProps: Readonly<TextboxTemplateProps>, nextContext: any): void;
            componentWillUpdate?(nextProps: Readonly<TextboxTemplateProps>, nextState: Readonly<{}>, nextContext: any): void;
            UNSAFE_componentWillUpdate?(nextProps: Readonly<TextboxTemplateProps>, nextState: Readonly<{}>, nextContext: any): void;
        };
        displayName: string;
        contextType?: React.Context<any> | undefined;
        propTypes?: any;
    };
}
export { getLocals };
export default Textbox;
